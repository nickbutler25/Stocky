name: Run Stocky Tee Times Daily - Mad Al

on:
  schedule:
    - cron: '39 17 * * 2,3,4,5'  # Runs at 5:45 PM UTC on Thursdays and Fridays
  workflow_dispatch:  # Allows manual triggering

jobs:
  run-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'


      # Step 2: Install Google Chrome
      - name: Install Google Chrome
        run: |
          wget -q -O - https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb > chrome.deb
          sudo dpkg -i chrome.deb
          sudo apt --fix-broken install -y  # Fix any missing dependencies

      # Step 3: Get Chrome version
      - name: Get Chrome Version
        run: |
          CHROME_VERSION=$(google-chrome --version)
          echo "Chrome Version: $CHROME_VERSION"

      # Step 4: Download ChromeDriver
      - name: Download ChromeDriver
        run: |
          # Print the URL for debugging
          echo "ChromeDriver URL: https://storage.googleapis.com/chrome-for-testing-public/132.0.6834.110/linux64/chromedriver-linux64.zip"

          # Download ChromeDriver without suppressing output for debugging
          wget https://storage.googleapis.com/chrome-for-testing-public/132.0.6834.110/linux64/chromedriver-linux64.zip
          if [ $? -ne 0 ]; then
            echo "Failed to download ChromeDriver"
            exit 1
          fi
          echo "Downloaded chromedriver-linux64.zip"

         # Step 5: List contents of the ChromeDriver ZIP file
      - name: List contents of ChromeDriver ZIP
        run: |
          unzip -l chromedriver-linux64.zip  # List the contents of the zip file

      # Step 6: Unzip ChromeDriver
      - name: Unzip ChromeDriver
        run: |
          unzip chromedriver-linux64.zip -d chromedriver-linux64
          echo "Unzipped chromedriver-linux64.zip"

      # Step 7: List files after unzip
      - name: List contents after unzip
        run: |
          ls -R chromedriver-linux64  # List all files after unzip

      # Step 8: Move ChromeDriver to /usr/local/bin (account for nested directory)
      - name: Move ChromeDriver
        run: |
          if [ ! -f chromedriver-linux64/chromedriver-linux64/chromedriver ]; then
            echo "ChromeDriver binary not found after unzip"
            exit 1
          fi
          sudo mv chromedriver-linux64/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          echo "Moved chromedriver to /usr/local/bin"

      # Step 9: Set executable permissions
      - name: Set executable permissions
        run: |
          sudo chmod +x /usr/local/bin/chromedriver
          if [ $? -ne 0 ]; then
            echo "Failed to set executable permissions"
            exit 1
          fi
          echo "Set executable permissions for chromedriver"

      # Step 10: Verify ChromeDriver installation
      - name: Verify ChromeDriver
        run: |
          chromedriver --version



      #Install required dependencies from requirements file
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # If you have dependencies

      - name: Install Selenium
        run: |
          pip install selenium webdriver-manager --no-deps

      # Step 11: Wait until 5:58 PM UTC before running the Python script
      - name: Wait until 5:58 PM UTC
        run: |
          # Get the current UTC time in seconds since epoch
          CURRENT_TIME=$(date +%s)
          
          # Set target time for 5:58 PM UTC in seconds since epoch
          TARGET_HOUR=17
          TARGET_MINUTE=58
          TARGET_SECOND=0
          TARGET_TIME=$(date -d "today ${TARGET_HOUR}:${TARGET_MINUTE}:${TARGET_SECOND}" +%s)
          
          # If the current time is after 5:58 PM, run the script immediately
          if [ $CURRENT_TIME -gt $TARGET_TIME ]; then
            echo "Current time ($CURRENT_TIME) is after 5:58 PM UTC. Running the script now."
            exit 0  # Exit early to run the Python script immediately
          fi

          # If it's not yet 5:58 PM, calculate the wait time
          WAIT_TIME=$((TARGET_TIME - CURRENT_TIME))
          echo "Current time: $CURRENT_TIME, Target time: $TARGET_TIME, Waiting for $WAIT_TIME seconds."
          
          # Wait until the target time (5:58 PM UTC)
          sleep $WAIT_TIME
          

      # Step 12: Run Python script
      - name: Run Python script
        run: |
          # Run the second instance of the Python script with the second set of parameters
          python program.py '{"username": "${{ vars.MAD_AL_USER }}", "password": "${{ secrets.MAD_AL_PASSWORD }}", "time_to_book": "${{ vars.SATURDAY_TIME }}"}'


